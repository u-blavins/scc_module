//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharesBrokerASPClient.CurrConvertor {
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CurrConvertorPortBinding", Namespace="http://convertor/")]
    public partial class CurrConvertor : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getLocalRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConversionRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCurrCodesOperationCompleted;
        
        /// <remarks/>
        public CurrConvertor() {
            this.Url = "http://localhost:8080/CurrConvertor/CurrConvertor";
        }
        
        public CurrConvertor(string url) {
            this.Url = url;
        }
        
        /// <remarks/>
        public event getLocalRatesCompletedEventHandler getLocalRatesCompleted;
        
        /// <remarks/>
        public event getConversionRateCompletedEventHandler getConversionRateCompleted;
        
        /// <remarks/>
        public event updateRatesCompletedEventHandler updateRatesCompleted;
        
        /// <remarks/>
        public event getCurrCodesCompletedEventHandler getCurrCodesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://convertor/", ResponseNamespace="http://convertor/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("rates")]
        public currencyRate[] getLocalRates() {
            object[] results = this.Invoke("getLocalRates", new object[0]);
            return ((currencyRate[])(results[0]));
        }
        
        /// <remarks/>
        public void getLocalRatesAsync() {
            this.getLocalRatesAsync(null);
        }
        
        /// <remarks/>
        public void getLocalRatesAsync(object userState) {
            if ((this.getLocalRatesOperationCompleted == null)) {
                this.getLocalRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLocalRatesOperationCompleted);
            }
            this.InvokeAsync("getLocalRates", new object[0], this.getLocalRatesOperationCompleted, userState);
        }
        
        private void OngetLocalRatesOperationCompleted(object arg) {
            if ((this.getLocalRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLocalRatesCompleted(this, new getLocalRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://convertor/", ResponseNamespace="http://convertor/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public double getConversionRate([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getConversionRate", new object[] {
                        arg0,
                        arg1});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void getConversionRateAsync(string arg0, string arg1) {
            this.getConversionRateAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getConversionRateAsync(string arg0, string arg1, object userState) {
            if ((this.getConversionRateOperationCompleted == null)) {
                this.getConversionRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConversionRateOperationCompleted);
            }
            this.InvokeAsync("getConversionRate", new object[] {
                        arg0,
                        arg1}, this.getConversionRateOperationCompleted, userState);
        }
        
        private void OngetConversionRateOperationCompleted(object arg) {
            if ((this.getConversionRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConversionRateCompleted(this, new getConversionRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://convertor/", ResponseNamespace="http://convertor/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool updateRates() {
            object[] results = this.Invoke("updateRates", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateRatesAsync() {
            this.updateRatesAsync(null);
        }
        
        /// <remarks/>
        public void updateRatesAsync(object userState) {
            if ((this.updateRatesOperationCompleted == null)) {
                this.updateRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRatesOperationCompleted);
            }
            this.InvokeAsync("updateRates", new object[0], this.updateRatesOperationCompleted, userState);
        }
        
        private void OnupdateRatesOperationCompleted(object arg) {
            if ((this.updateRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRatesCompleted(this, new updateRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://convertor/", ResponseNamespace="http://convertor/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getCurrCodes() {
            object[] results = this.Invoke("getCurrCodes", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getCurrCodesAsync() {
            this.getCurrCodesAsync(null);
        }
        
        /// <remarks/>
        public void getCurrCodesAsync(object userState) {
            if ((this.getCurrCodesOperationCompleted == null)) {
                this.getCurrCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrCodesOperationCompleted);
            }
            this.InvokeAsync("getCurrCodes", new object[0], this.getCurrCodesOperationCompleted, userState);
        }
        
        private void OngetCurrCodesOperationCompleted(object arg) {
            if ((this.getCurrCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrCodesCompleted(this, new getCurrCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.netbeans.org/schema/rates")]
    public partial class currencyRate {
        
        /// <remarks/>
        public string currencyCode;
        
        /// <remarks/>
        public double rate;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    public delegate void getLocalRatesCompletedEventHandler(object sender, getLocalRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLocalRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLocalRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public currencyRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((currencyRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    public delegate void getConversionRateCompletedEventHandler(object sender, getConversionRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConversionRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConversionRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    public delegate void updateRatesCompletedEventHandler(object sender, updateRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    public delegate void getCurrCodesCompletedEventHandler(object sender, getCurrCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.1.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCurrCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCurrCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}
